import streamlit as st
import pandas as pd

st.title("Machine Learning")
st.markdown("<p style='text-align: right;'>‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å 1 : ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏ß‡∏£‡∏±‡∏ä‡∏ê‡∏ç‡∏≤ ‡∏à‡∏±‡πà‡∏ô‡πÄ‡∏•‡πá‡∏Å 6604062610535</p>",
            unsafe_allow_html=True)
st.markdown("<p style='text-align: right;'>‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å 2 : ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏™‡∏∏‡∏ä‡∏≤‡∏ô‡∏±‡∏ô‡∏ó‡πå ‡∏õ‡∏¥‡πà‡∏ô‡∏ó‡∏≠‡∏á 6604062610578</p>",
            unsafe_allow_html=True)

st.text("‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Flight Price Dataset of Bangladesh | ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏á‡∏Ñ‡∏•‡∏≤‡πÄ‡∏ó‡∏®")
st.markdown("download ‡∏°‡∏≤‡∏à‡∏≤‡∏Å https://www.kaggle.com/datasets/mahatiratusher/flight-price-dataset-of-bangladesh")

st.write("## üìå‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ feature ‡∏Ç‡∏≠‡∏á Dataset")
st.markdown("### 1. Categorical Features (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà)")
st.markdown("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ OneHotEncoder ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•")
df = pd.DataFrame(
    {
        "Feature": ["Airline", "Source"
                ,"Source Name","Destination","Destination Name","Stopovers",
                "Aircraft Type","Class","Booking Source","Seasonality"],

        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢": ["‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏ô", "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á"
                ,"‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á","‡∏£‡∏´‡∏±‡∏™‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á"
                ,"‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á","‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞‡∏û‡∏±‡∏Å","‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô","‡∏ä‡∏±‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß"
                ,"‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á","‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ö‡∏¥‡∏ô"]
    }
)
st.data_editor(
    df,
    column_config={
        "Feature":"Feature",
        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢": st.column_config.TextColumn(
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢",
            default="st.",
            max_chars=50,
            validate=r"^st\.[a-z_]+$",
        )
    },
    hide_index=True,
)
st.markdown("### 2. Numerical Features (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)")
st.markdown("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ StandardScaler ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô")
df = pd.DataFrame(
    {
        "Feature": ["Duration (hrs)", "Base Fare (BDT)"
                ,"Tax & Surcharge (BDT)","Total Fare (BDT)","Days Before Departure"],

        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢": ["‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏±‡πã‡∏ß‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏ß‡∏Å‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°)"
                ,"‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°","‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°"
                ,"	‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á"]
    }
)
st.data_editor(
    df,
    column_config={
        "Feature":"Feature",
        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢": st.column_config.TextColumn(
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢",
            default="st.",
            max_chars=50,
            validate=r"^st\.[a-z_]+$",
        )
    },
    hide_index=True,
)

st.markdown("### 3. Date-Time Features (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤)")
st.markdown("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Feature ‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå")
df = pd.DataFrame(
    {
        "Feature": ["Departure Date & Time", "Arrival Date & Time"],

        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢": ["‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á", "‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏ñ‡∏∂‡∏á"]
    }
)
st.data_editor(
    df,
    column_config={
        "Feature":"Feature",
        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢": st.column_config.TextColumn(
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢",
            default="st.",
            max_chars=50,
            validate=r"^st\.[a-z_]+$",
        )
    },
    hide_index=True,
)

st.write("## üìå‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
st.markdown("1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Features ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç")
st.markdown("‚úÖ ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Features :")
st.markdown("- Duration (hrs) ‚Üí ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤\n"
"\n- Stopovers ‚Üí ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡πÅ‡∏ß‡∏∞‡∏û‡∏±‡∏Å‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏™‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤\n"
"\n- Class ‚Üí ‡∏ä‡∏±‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏±‡πã‡∏ß\n"
"\n- Days Before Departure ‚Üí ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏°‡∏±‡∏Å‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏°‡∏±‡∏Å‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô)")

code = '''# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Feature ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
features = ["Duration (hrs)", "Stopovers", "Class", "Days Before Departure"]
target = "Total Fare (BDT)"'''
st.code(code, language="python")

st.markdown("2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Categorical & Numerical)")
st.markdown("‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î ‡πÑ‡∏î‡πâ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô :")
st.markdown("- Categorical Features : Stopovers , Class")
st.markdown("- Numeric Features : Duration (hrs) , Days Before Departure")

code = '''# ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á Features
numeric_features = ["Duration (hrs)", "Days Before Departure"]
categorical_features = ["Stopovers", "Class"]'''
st.code(code, language="python")

st.markdown("3. ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Preprocessing ‡∏î‡πâ‡∏ß‡∏¢ ColumnTransformer")
st.markdown("‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ä‡πâ ColumnTransformer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πà‡∏≤‡∏á ‡πÜ :\n"
"\n- ‡πÉ‡∏ä‡πâ StandardScaler ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô\n"
"\n- ‡πÉ‡∏ä‡πâ OneHotEncoder ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (0, 1)")

code = '''# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Categorical ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
preprocessor = ColumnTransformer([
    ("num", StandardScaler(), numeric_features),
    ("cat", OneHotEncoder(handle_unknown='ignore'), categorical_features)
])'''
st.code(code, language="python")

st.markdown("4. ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Train/Test")
st.markdown("‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î Train ‡πÅ‡∏•‡∏∞ Test ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ train_test_split:\n"
"\n- Train Set: 80% ‚Üí ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Train ‡πÇ‡∏°‡πÄ‡∏î‡∏•\n"
"\n- Test Set: 20% ‚Üí ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•")

code = '''# ‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• train/test
X_train, X_test, y_train, y_test = train_test_split(df[features], df[target], test_size=0.2, random_state=42)
'''
st.code(code, language="python")

st.write("## üìå‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á Linear Regression")
st.markdown("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;‡πÄ‡∏õ‡πá‡∏ô Machine Learning ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Supervised Learning ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ dataset ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏≤‡∏° "
"‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏≤‡∏°")
st.markdown("‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á Linear Regression ‡∏Ñ‡∏∑‡∏≠ : y = mx + c")

col1, col2 = st.columns(2)

with col1:
    st.markdown("- x ‡∏Ñ‡∏∑‡∏≠ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡πâ‡∏ô(Input) ")
    st.markdown("- y ‡∏Ñ‡∏∑‡∏≠ ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏≤‡∏°(Output) ")

with col2:
    st.markdown("- m ‡∏Ñ‡∏∑‡∏≠ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏ô ")
    st.markdown("- c ‡∏Ñ‡∏∑‡∏≠ ‡∏à‡∏∏‡∏î‡∏ï‡∏±‡∏î‡πÅ‡∏Å‡∏ô y ")

st.write("## üìå‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á Random Forest Regressor")
st.markdown("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Random Forest = ‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢ Decision Tree ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ dataset ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô"
"‡∏ó‡∏≥ prediction ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ Tree ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏ß‡∏°‡∏ú‡∏•‡πÇ‡∏î‡∏¢:\n"
"- Classification ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ vote ‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î\n "
"- Regression ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ mean ‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå\n"
"\n‡πÅ‡∏ï‡πà‡∏•‡∏∞ Decision Tree ‡πÄ‡∏õ‡πá‡∏ô weak learner ‚Üí ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ model ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô")

st.write("## üìå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•")
st.markdown("1. ‡∏Å‡∏≤‡∏£ Train & Test ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á Linear Regression ‡πÄ‡πÄ‡∏•‡∏∞ Random Forest")
st.markdown("‡πÉ‡∏ä‡πâ fit() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≠‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Training Set :")
st.markdown("‡πÉ‡∏ä‡πâ predict() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Test Set :")

code = '''# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Linear Regression
lr_pipeline = Pipeline([
    ("preprocessor", preprocessor),
    ("model", LinearRegression())
])
lr_pipeline.fit(X_train, y_train)
y_pred_lr = lr_pipeline.predict(X_test)'''
st.code(code, language="python")

code = '''# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Random Forest
rf_pipeline = Pipeline([
    ("preprocessor", preprocessor),
    ("model", RandomForestRegressor(n_estimators=100, random_state=42))
])
rf_pipeline.fit(X_train, y_train)
y_pred_lr = lr_pipeline.predict(X_test)'''
st.code(code, language="python")

st.markdown("2. ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• (Evaluation)")
st.markdown("‡πÉ‡∏ä‡πâ Mean Absolute Error (MAE) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• :")

code = '''# ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•
mae_lr = mean_absolute_error(y_test, y_pred_lr)
mae_rf = mean_absolute_error(y_test, y_pred_rf)'''
st.code(code, language="python")


st.markdown("3. ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (Visualization)")
st.markdown("‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ matplotlib ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á :")
st.markdown("‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡∏£‡∏≤‡∏ü Linear Regression")

code = '''fig1, ax1 = plt.subplots(figsize=(10, 5))
ax1.plot(sample_indices, y_test_sampled, label="Actual Values", color='black', linestyle='dotted')
ax1.plot(sample_indices, y_pred_lr_sampled, label="Linear Regression Predictions", color='blue')
ax1.legend()
ax1.set_title("Actual vs Linear Regression Predictions")
ax1.set_xlabel("Sample Index")
ax1.set_ylabel("Total Fare (BDT)")
st.pyplot(fig1)
'''
st.code(code, language="python")

st.markdown("‡πÇ‡∏Ñ‡πâ‡∏î‡∏Å‡∏£‡∏≤‡∏ü Random Forest")

code = '''fig2, ax2 = plt.subplots(figsize=(10, 5))
ax2.plot(sample_indices, y_test_sampled, label="Actual Values", color='black', linestyle='dotted')
ax2.plot(sample_indices, y_pred_rf_sampled, label="Random Forest Predictions", color='red')
ax2.legend()
ax2.set_title("Actual vs Random Forest Predictions")
ax2.set_xlabel("Sample Index")
ax2.set_ylabel("Total Fare (BDT)")
st.pyplot(fig2)
'''
st.code(code, language="python")

st.markdown("<p style='text-align: right;'>‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å chatGPT</p>",
            unsafe_allow_html=True)